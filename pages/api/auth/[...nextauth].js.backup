// pages/api/auth/[...nextauth].js

import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import TwitterProvider from 'next-auth/providers/twitter';
import GoogleProvider from 'next-auth/providers/google';
import { adminAuth, adminDb } from '../../../lib/firebaseConfig';

export default NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Firebase',
      credentials: {
        token: { label: 'Token', type: 'text' }
      },
      async authorize(credentials) {
        if (!credentials.token) {
          throw new Error('No token provided');
        }

        try {
          const decodedToken = await adminAuth.verifyIdToken(credentials.token);
          const user = await adminAuth.getUser(decodedToken.uid);

          // Update or create user data in Firestore
          await updateUserData(user);

          return {
            id: user.uid,
            name: user.displayName,
            email: user.email,
            image: user.photoURL,
            tokens: user.tokens
          };
        } catch (error) {
          console.error('Error during token verification:', error);
          throw new Error('Invalid token');
        }
      },
    }),
    TwitterProvider({
      clientId: process.env.TWITTER_CLIENT_ID,
      clientSecret: process.env.TWITTER_CLIENT_SECRET,
      version: "2.0",
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      if (user) {
        token.id = user.id;
      }
      if (account) {
        token.provider = account.provider;
        token.providerId = account.providerAccountId;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.id = token.id;
      
      if (token.provider === 'twitter' || token.provider === 'google' || token.provider === 'credentials') {
        try {
          let firebaseUser;
          if (token.provider === 'credentials') {
            firebaseUser = await adminAuth.getUser(token.id);
          } else {
            try {
              firebaseUser = await adminAuth.getUser(token.providerId);
            } catch (error) {
              if (error.code === 'auth/user-not-found') {
                firebaseUser = await adminAuth.createUser({
                  uid: token.providerId,
                  displayName: session.user.name,
                  email: session.user.email,
                  photoURL: session.user.image,
                });
              } else {
                throw error;
              }
            }
          }

          // Update or create user data in Firestore
          await updateUserData(firebaseUser);

          // Get the latest user data from Firestore
          const userDoc = await adminDb.collection('users').doc(firebaseUser.uid).get();
          const userData = userDoc.data();

          // Update session with Firebase user data
          session.user.id = firebaseUser.uid;
          session.user.tokens = userData.tokens;
          session.user.provider = token.provider;
        } catch (error) {
          console.error('Error in session callback:', error);
        }
      }
      
      return session;
    },
  },
  pages: {
    signIn: '/game', // Redirect to /game after sign in
  },
});

async function updateUserData(user) {
    const userRef = adminDb.collection('users').doc(user.uid);
    const docSnap = await userRef.get();
  
    if (!docSnap.exists) {
      await userRef.set({
        uid: user.uid,
        email: user.email || '',
        displayName: user.displayName || user.email,
        photoURL: user.photoURL,
        tokens: 50, // Initial tokens for new users
        createdAt: new Date().toISOString(),
      });
    } else {
      // Update existing user data
      await userRef.update({
        lastLogin: new Date().toISOString(),
        email: user.email || docSnap.data().email,
        displayName: user.displayName || docSnap.data().displayName,
        photoURL: user.photoURL || docSnap.data().photoURL,
      });
    }
  }