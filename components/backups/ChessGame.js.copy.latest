// components/ChessGame.js

import { useState, useEffect, useCallback, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { Chess } from 'chess.js';
import { Chessboard } from 'react-chessboard';
import { db, auth } from '../lib/firebaseConfig';
import { doc, getDoc, getDocs, updateDoc, onSnapshot, addDoc, collection, query, orderBy, serverTimestamp, deleteDoc, limit, runTransaction, writeBatch } from 'firebase/firestore';
import BuyTokens from './BuyTokens';
import ReactDOM from 'react-dom';
import ChatBox from './ChatBox';  // Import the new ChatBox component

export default function ChessGame({ onMoveAttempt, isLoggedIn }) {
    const { data: session } = useSession();
    const [game, setGame] = useState(new Chess());
    const [boardOrientation, setBoardOrientation] = useState('white');
    const [userTokens, setUserTokens] = useState(0);
    const [lastMove, setLastMove] = useState(null);
    const [lockUntil, setLockUntil] = useState(null);
    const [moveHistory, setMoveHistory] = useState([]);
    const [currentMoveIndex, setCurrentMoveIndex] = useState(-1);
    const [errorMessage, setErrorMessage] = useState('');
    const isCompletingGameRef = useRef(false);

    const [pendingMove, setPendingMove] = useState(null);
    const [isBoardLocked, setIsBoardLocked] = useState(false);
    const [lockedByUser, setLockedByUser] = useState(null);
    const [lockedByUserName, setLockedByUserName] = useState(null);

    const [showBuyTokensModal, setShowBuyTokensModal] = useState(false);
    const [currentMoveAttempt, setCurrentMoveAttempt] = useState(null);

    const [currentGameNumber, setCurrentGameNumber] = useState(0);

    // Modify the selectedMove state to include from and to
    const [selectedMove, setSelectedMove] = useState(null);
    
    // New state for pagination
    const [currentPage, setCurrentPage] = useState(1);
    const movesPerPage = 8;
    
    // Modify the customSquareStyles
    const customSquareStyles = {};
    if (selectedMove) {
        customSquareStyles[selectedMove.from] = { backgroundColor: '#a59681' };
        customSquareStyles[selectedMove.to] = { backgroundColor: '#a59681' };
    } else if (lastMove) {
        customSquareStyles[lastMove.from] = { backgroundColor: '#a59681' };
        customSquareStyles[lastMove.to] = { backgroundColor: '#a59681' };
    }
    if (currentMoveAttempt) {
        customSquareStyles[currentMoveAttempt.from] = { 
            ...customSquareStyles[currentMoveAttempt.from],
            backgroundColor: '#7fa650'
        };
        customSquareStyles[currentMoveAttempt.to] = { 
            ...customSquareStyles[currentMoveAttempt.to],
            backgroundColor: '#7fa650'
        };
    }
    
    const boardClasses = `rounded-md flex items-center justify-center border-4 border-neutral-600 ${
        isBoardLocked && lockedByUser !== session?.user.id ? 'animate-pulse-opacity' : ''
    }`;

    function setGameNumber() {
        // get all games
        const gamesRef = collection(db, 'games');
        // get the number of games and set the current game number
        getDocs(gamesRef).then((snapshot) => {
            setCurrentGameNumber(snapshot.size
                ? snapshot.size
                : 0
            );
        });
    }

    const handleBuyTokensAndPlay = () => {
        setShowBuyTokensModal(true);
    };

    const BuyTokensModal = () => {
        return ReactDOM.createPortal(
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-neutral-800 p-8 rounded-lg shadow-xl max-w-md w-full">
                    <BuyTokens />
                    <button onClick={() => setShowBuyTokensModal(false)} className="mt-4 text-neutral-400 hover:text-white transition duration-300 w-full text-center">Close</button>
                </div>
            </div>,
            document.body
        );
    };

    useEffect(() => {
        const gameRef = doc(db, "games", "currentGame");
        const unsubscribeGame = onSnapshot(gameRef, (docSnapshot) => {
            if (docSnapshot.exists()) {
                const data = docSnapshot.data();
                const newGame = new Chess(data.fen);
                setGame(newGame);
                setBoardOrientation(newGame.turn() === 'w' ? 'white' : 'black');
                setLastMove(data.lastMove || null);
                setLockUntil(data.lockUntil || null);
                setIsBoardLocked(data.lockUntil ? data.lockUntil > Date.now() : false);
                setLockedByUser(data.lockedByUser || null);
                setLockedByUserName(data.lockedByUserName || null);
                setGameNumber();

                if (isGameOver(newGame) && !isCompletingGameRef.current) {
                    handleGameCompletion(newGame, data.lastMove);
                }
            } else {
                initializeNewGame();
            }
        });

        if (session) {
            const userRef = doc(db, "users", session.user.id);
            const unsubscribeUser = onSnapshot(userRef, (userDoc) => {
                if (userDoc.exists()) {
                    setUserTokens(userDoc.data().tokens);
                }
            });

            const movesQuery = query(collection(db, "moves"), orderBy("moveTimestamp", "desc"));
            const unsubscribeMoves = onSnapshot(movesQuery, (snapshot) => {
                const moves = snapshot.docs.map(doc => ({
                    ...doc.data(),
                    id: doc.id
                }));
                setMoveHistory(moves);
                setCurrentMoveIndex(0); // Set to 0 as we're now starting from the latest move
            });

            return () => {
                unsubscribeGame();
                unsubscribeUser();
                unsubscribeMoves();
            };
        }

        return () => unsubscribeGame();
    }, [session]);

    const formatTimestamp = (timestamp) => {
        if (!timestamp) return '';
        const date = timestamp.toDate();
        // date + time
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) + ', ' + date.toLocaleDateString([], { month: 'short', day: 'numeric', year: 'numeric' });
    };

    const initializeNewGame = async () => {
        const newGame = new Chess();
        try {
            await updateDoc(doc(db, "games", "currentGame"), {
                fen: newGame.fen(),
                lastMove: null,
                lockUntil: null
            });
        } catch (error) {
            console.error("Error initializing new game:", error);
            // setErrorMessage('Failed to start a new game. Please try refreshing the page.');
        }
    };
    

    async function lockBoard() {
        if (!isLoggedIn || userTokens < 1) return;

        try {
            await runTransaction(db, async (transaction) => {
                const gameRef = doc(db, "games", "currentGame");
                const userRef = doc(db, "users", session.user.id);

                const gameDoc = await transaction.get(gameRef);
                const userDoc = await transaction.get(userRef);

                if (!gameDoc.exists() || !userDoc.exists()) {
                    throw new Error("Game or user document not found");
                }

                const currentTokens = userDoc.data().tokens;
                if (currentTokens < 1) {
                    throw new Error("Insufficient tokens");
                }

                const lockDuration = 60000; // 1 minute in milliseconds
                const lockUntil = Date.now() + lockDuration;

                transaction.update(gameRef, {
                    lockUntil: lockUntil,
                    lockedByUser: session.user.id,
                    lockedByUserName: session.user.name
                });

                // Deduct the token here
                transaction.update(userRef, {
                    tokens: currentTokens - 1
                });
            });

            setIsBoardLocked(true);
            setLockedByUser(session.user.id);
            setLockUntil(Date.now() + 60000);
            setLockedByUserName(session.user.name);
            setUserTokens(userTokens - 1);

            // Automatically unlock the board after 1 minute
            setTimeout(() => {
                unlockBoard();
            }, 60000);

        } catch (error) {
            console.error("Error locking board:", error);
            setErrorMessage('Failed to lock board. Please try again.');
        }
    }

    // Update the onDrop function to set the current move attempt
    const onDrop = useCallback((sourceSquare, targetSquare) => {
        if (!isLoggedIn) {
            onMoveAttempt();
            return false;
        }

        if (isBoardLocked && lockedByUser !== session.user.id) return false;

        const move = {
            from: sourceSquare,
            to: targetSquare,
            promotion: 'q' // Always promote to queen for simplicity
        };

        try {
            const gameCopy = new Chess(game.fen());
            const result = gameCopy.move(move);

            if (result === null) {
                return false;
            }

            setPendingMove({ ...move, playerHandle: session.user.name });
            setGame(gameCopy);
            setCurrentMoveAttempt({ from: sourceSquare, to: targetSquare }); // Set the current move attempt
            return true;
        } catch (error) {
            return false;
        }
    }, [game, isLoggedIn, isBoardLocked, lockedByUser, onMoveAttempt, session]);

    // Modify the makeMove function to use SAN notation
    async function makeMove() {
        if (!isLoggedIn || !pendingMove || lockedByUser !== session.user.id) return;

        try {
            await runTransaction(db, async (transaction) => {
                const gameRef = doc(db, "games", "currentGame");
                const gameDoc = await transaction.get(gameRef);
                
                if (!gameDoc.exists()) {
                    throw new Error("Game document not found");
                }

                const currentGameState = new Chess(gameDoc.data().fen);
                
                const result = currentGameState.move({
                    from: pendingMove.from,
                    to: pendingMove.to,
                    promotion: pendingMove.promotion
                });

                if (result === null) {
                    throw new Error("Invalid move");
                }

                // Use the SAN notation from the result
                const moveData = {
                    move: result.san,
                    playerHandle: pendingMove.playerHandle,
                    moveTimestamp: serverTimestamp()
                };

                const newMoveRef = doc(collection(db, "moves"));
                transaction.set(newMoveRef, moveData);

                transaction.update(gameRef, {
                    fen: currentGameState.fen(),
                    lastMove: {
                        from: pendingMove.from,
                        to: pendingMove.to,
                        promotion: pendingMove.promotion,
                        playerHandle: pendingMove.playerHandle,
                        san: result.san
                    },
                    lockUntil: null,
                    lockedByUser: null,
                    lockedByUserName: null
                });
            });

            setPendingMove(null);
            setCurrentMoveAttempt(null);
            setIsBoardLocked(false);
            setLockedByUser(null);
            setLockUntil(null);
            setLockedByUserName(null);

        } catch (error) {
            console.error("Error making move:", error);
            setErrorMessage('Failed to make move. Please try again.');
            const currentGameState = new Chess(game.fen());
            setGame(currentGameState);
        }
    }

    async function unlockBoard() {
        try {
            await updateDoc(doc(db, "games", "currentGame"), {
                lockUntil: null,
                lockedByUser: null
            });

            setIsBoardLocked(false);
            setLockedByUser(null);
            setLockUntil(null);
            setLockedByUserName(null);
        } catch (error) {
            console.error("Error unlocking board:", error);
            setErrorMessage('Failed to unlock board. Please try refreshing the page.');
        }
    }

    async function resetMove() {
        setPendingMove(null);
        setCurrentMoveAttempt(null); // Clear the current move attempt
    
        try {
            const gameRef = doc(db, "games", "currentGame");
            const docSnap = await getDoc(gameRef);
    
            if (docSnap.exists()) {
                const newGame = new Chess(docSnap.data().fen);
                setGame(newGame);
            } else {
                console.error("No such document in Firestore!");
                // setErrorMessage('Game data not found. Please try again.');
            }
        } catch (error) {
            console.error("Error fetching game data:", error);
            // setErrorMessage('An error occurred while resetting the move. Please try again.');
        }
    }

    function isGameOver(chess) {
        return chess.isCheckmate() || chess.isDraw() || chess.isStalemate() || chess.isThreefoldRepetition() || chess.isInsufficientMaterial();
    }

    async function handleGameCompletion(finalGameState, lastMove) {
        isCompletingGameRef.current = true;
        try {
            await runTransaction(db, async (transaction) => {
                const movesSnapshot = await getDocs(query(collection(db, "moves"), orderBy("moveTimestamp", "asc")));
                let movesToSave = movesSnapshot.docs.map(doc => {
                    const data = doc.data();
                    return {
                        move: data.move,
                        playerHandle: data.playerHandle,
                        moveTimestamp: data.moveTimestamp.toMillis() // Convert Timestamp to milliseconds
                    };
                });

                // Add the last move to the moves array for the finished game
                // movesToSave.push({
                //     move: `${lastMove.from}-${lastMove.to}`,
                //     playerHandle: lastMove.playerHandle,
                //     moveTimestamp: Date.now() // Use current timestamp for the last move
                // });

                const finishedGame = {
                    fen: finalGameState.fen(),
                    moves: movesToSave,
                    endedAt: Date.now(),
                    lastMoveBy: lastMove.playerHandle,
                    result: getGameResult(finalGameState),
                    status: 'completed'
                };

                // Save the finished game
                const newGameRef = await addDoc(collection(db, "games"), finishedGame);
                await updateDoc(newGameRef, { gameId: newGameRef.id });

                // Delete all moves including the last one
                movesSnapshot.docs.forEach((doc) => {
                    transaction.delete(doc.ref);
                });

                // Start a new game with an empty moves collection
                const newGame = new Chess();
                transaction.set(doc(db, "games", "currentGame"), {
                    fen: newGame.fen(),
                    lastMove: null,
                    lockUntil: null
                });

                // Explicitly delete the 'moves' collection
                const movesCollectionRef = collection(db, "moves");
                const allMovesSnapshot = await getDocs(movesCollectionRef);
                allMovesSnapshot.docs.forEach((doc) => {
                    transaction.delete(doc.ref);
                });

                // Add game end message to chat
                const gameEndMessage = `Game #${currentGameNumber} has ended. Result: ${getGameResult(finalGameState)}`;
                await addDoc(collection(db, "messages"), {
                    content: gameEndMessage,
                    playerName: "System",
                    timestamp: serverTimestamp(),
                    gameNumber: currentGameNumber
                });
            });

            // Reset local state
            setMoveHistory([]);
            setCurrentMoveIndex(-1);
            setLastMove(null);

        } catch (error) {
            console.error("Error handling game completion:", error);
            throw error;
        } finally {
            isCompletingGameRef.current = false;
        }
    }

    function getGameResult(chess) {
        if (chess.isCheckmate()) return chess.turn() === 'w' ? 'Black wins' : 'White wins';
        if (chess.isDraw()) return 'Draw';
        if (chess.isStalemate()) return 'Stalemate';
        if (chess.isThreefoldRepetition()) return 'Draw by repetition';
        if (chess.isInsufficientMaterial()) return 'Draw by insufficient material';
        return 'Unknown';
    }

    // Modify the processMove function to handle SAN notation
    function processMove(move) {
        if (typeof move === 'string') {
            // If the move is already in SAN notation, return it as is
            return move;
        } else if (typeof move === 'object' && move.from && move.to) {
            // If it's an object with from and to, convert it to SAN
            const tempGame = new Chess(game.fen());
            const result = tempGame.move({
                from: move.from,
                to: move.to,
                promotion: move.promotion || 'q'
            });
            return result ? result.san : null;
        }
        console.error("Invalid move format:", move);
        throw new Error("Invalid move format");
    }

    // Modify the displayMoveOnBoard function
    function displayMoveOnBoard(moveIndex) {
        const newGame = new Chess();
        try {
            for (let i = moveHistory.length - 1; i >= moveIndex; i--) {
                const moveData = moveHistory[i].move;
                const result = newGame.move(moveData);
                if (i === moveIndex) {
                    setSelectedMove({
                        from: result.from,
                        to: result.to
                    });
                }
            }
            setGame(newGame);
            setCurrentMoveIndex(moveIndex);
        } catch (error) {
            console.error("Error in displayMoveOnBoard:", error);
            setErrorMessage('Unable to display move. Please try again.');
        }
    }

    // Modify the goToPreviousMove function
    function goToPreviousMove() {
        if (currentMoveIndex < moveHistory.length - 1) {
            const newIndex = currentMoveIndex + 1;
            const newGame = new Chess();
            try {
                for (let i = moveHistory.length - 1; i >= newIndex; i--) {
                    const result = newGame.move(moveHistory[i].move);
                    if (i === newIndex) {
                        setSelectedMove({
                            from: result.from,
                            to: result.to
                        });
                    }
                }
                setGame(newGame);
                setCurrentMoveIndex(newIndex);
            } catch (error) {
                console.error("Error in goToPreviousMove:", error);
                setErrorMessage('Unable to show previous move. Please try again.');
            }
        }
    }

    // Modify the goToNextMove function
    function goToNextMove() {
        if (currentMoveIndex > 0) {
            const newIndex = currentMoveIndex - 1;
            const newGame = new Chess();
            try {
                for (let i = moveHistory.length - 1; i >= newIndex; i--) {
                    const result = newGame.move(moveHistory[i].move);
                    if (i === newIndex) {
                        setSelectedMove({
                            from: result.from,
                            to: result.to
                        });
                    }
                }
                setGame(newGame);
                setCurrentMoveIndex(newIndex);
            } catch (error) {
                console.error("Error in goToNextMove:", error);
                setErrorMessage('Unable to show next move. Please try again.');
            }
        }
    }

    // Add a useEffect to reset selectedMove when a new move is made
    useEffect(() => {
        setSelectedMove(null);
    }, [lastMove]);

    // Modify the pagination logic
    const indexOfFirstMove = (currentPage - 1) * movesPerPage;
    const indexOfLastMove = currentPage * movesPerPage;
    const currentMoves = moveHistory.slice(indexOfFirstMove, indexOfLastMove);

    const paginate = (pageNumber) => setCurrentPage(pageNumber);

    const Pagination = ({ movesPerPage, totalMoves, paginate, currentPage }) => {
        const pageNumbers = [];
        for (let i = 1; i <= Math.ceil(totalMoves / movesPerPage); i++) {
            pageNumbers.push(i);
        }

        return (
            <nav className="mt-4">
                <ul className="flex justify-center">
                    {pageNumbers.map(number => (
                        <li key={number} className="mx-1">
                            <button
                                onClick={() => paginate(number)}
                                className={`px-3 py-1 rounded ${currentPage === number ? 'bg-neutral-200 text-neutral-700' : 'text-neutral-200'}`}
                            >
                                {number}
                            </button>
                        </li>
                    ))}
                </ul>
            </nav>
        );
    };

    

    return (
    <div className="items-start justify-center w-full flex flex-row max-w-full gap-x-4 m-auto">
        <div className="flex flex-col justify-between items-end gap-y-4">
            <div className="flex items-center space-x-2 bg-neutral-800 p-4 rounded h-full w-full">
                <img src="/assets/img/token.png" alt="Token" className="w-6 h-6" />
                <h2 className="text-white text-xl font-bold">Available Tokens:</h2>
                <span className="text-white font-bold text-xl">{userTokens}</span>
            </div>
            <div className="w-full h-full">
                <ChatBox gameNumber={currentGameNumber} />
            </div>
        </div>
        <div className="flex flex-col items-center w-full relative col-span-10 max-w-xl">
            <div className="w-full">
                <div>
                    <div className={boardClasses}>
                        <Chessboard 
                            position={game.fen()} 
                            onPieceDrop={onDrop}
                            boardOrientation={boardOrientation}
                            customSquareStyles={customSquareStyles}
                            animationDuration={200}
                            draggablePieces={!isBoardLocked || lockedByUser === session?.user.id}
                        />
                    </div>
                </div>
            </div>
            
            <div className="w-full mt-4">
                {errorMessage && (
                    <div className="bg-red-500 text-white p-2 rounded mb-4">
                        {errorMessage}
                    </div>
                )}
                {isBoardLocked && (
                    <div className="bg-yellow-500 text-black p-2 rounded mb-4">
                        {lockedByUser === session?.user.id
                            ? `You have locked the board. You have 1 minute to make a move.`
                            : `Board is locked by ${lockedByUserName || 'another player'}. Please wait.`
                        }
                    </div>
                )}
                <div className="flex justify-between gap-x-4 mb-4">
                <button 
                    onClick={goToPreviousMove} 
                    disabled={currentMoveIndex >= moveHistory.length - 1}
                    className="bg-blue-700 px-10 py-2 text-neutral-100 font-bold rounded-md transition hover:bg-blue-800 disabled:bg-neutral-800 disabled:cursor-not-allowed"
                >
                    <span className="fas fa-arrow-left font-black"></span>
                </button>
                <div className="flex flex-col items-center bg-neutral-800 p-2 rounded w-full">
                    {lastMove && (
                        <>
                        <div className="text-white text-sm">
                            Last Move: <span className="font-bold">
                            {typeof lastMove.move === 'string' ? lastMove.move : `${lastMove.from}-${lastMove.to}`}
                            </span>
                        </div>
                        <div className="text-white text-sm">
                            By: <span className="font-bold">{lastMove.playerHandle}</span>
                        </div>
                        </>
                    )}
                </div>
                <button 
                    onClick={goToNextMove} 
                    disabled={currentMoveIndex <= 0}
                    className="bg-blue-700 px-10 py-2 text-neutral-100 font-bold rounded-md transition hover:bg-blue-800 disabled:bg-neutral-800 disabled:cursor-not-allowed"
                >
                    <span className="fas fa-arrow-right font-black"></span>
                </button>
            </div>
                <div className="grid grid-cols-2 gap-4">
                    <button 
                        onClick={
                            isLoggedIn 
                                ? isBoardLocked
                                    ? lockedByUser === session?.user.id
                                        ? makeMove
                                        : () => {} // Do nothing if board is locked by another user
                                    : userTokens === 0 
                                        ? handleBuyTokensAndPlay 
                                        : lockBoard 
                                : onMoveAttempt
                        } 
                        disabled={
                            !isLoggedIn || 
                            (isBoardLocked && lockedByUser !== session?.user.id) ||
                            (isBoardLocked && lockedByUser === session?.user.id && !pendingMove)
                        }
                        className={`
                            ${
                                !isLoggedIn
                                    ? 'bg-neutral-800 hover:bg-neutral-900'
                                    : isBoardLocked
                                        ? lockedByUser === session?.user.id
                                            ? pendingMove
                                                ? 'bg-green-500 hover:bg-green-600'
                                                : 'bg-gray-500'
                                            : 'bg-gray-500'
                                        : userTokens === 0
                                            ? 'bg-yellow-600 hover:bg-yellow-700'
                                            : 'bg-green-800 hover:bg-green-900'
                            } 
                            px-6 py-4 text-white font-bold rounded-md transition 
                            ${isLoggedIn ? 'disabled:bg-neutral-600 disabled:cursor-not-allowed' : ''}
                        `}
                    >
                        {
                            !isLoggedIn
                                ? 'Login to Play'
                                : isBoardLocked
                                    ? lockedByUser === session?.user.id
                                        ? 'Make Move'
                                        : 'Board Locked'
                                    : userTokens === 0
                                        ? 'Buy Tokens & Play'
                                        : 'Lock Board & Make Move'
                        }
                    </button>
                    <button 
                        onClick={resetMove} 
                        disabled={!isLoggedIn || !pendingMove || (isBoardLocked && lockedByUser !== session?.user.id)}
                        className="bg-red-700 hover:bg-red-800 px-6 py-4 text-white font-bold rounded-md transition disabled:bg-neutral-800 disabled:cursor-not-allowed"
                    >
                        Reset Move
                    </button>
                </div>
            </div>
            {showBuyTokensModal && <BuyTokensModal />}
        </div>
        <div className="bg-neutral-800 p-4 rounded-lg">
            <h2 className="text-white text-xl font-bold mb-3">Game #{currentGameNumber} | Move History</h2>
            <table className="w-full text-sm text-left text-neutral-300">
                <thead className="text-xs uppercase bg-neutral-700 text-neutral-300">
                    <tr>
                        <th scope="col" className="px-6 py-3">Player</th>
                        <th scope="col" className="px-6 py-3">Move</th>
                        <th scope="col" className="px-6 py-3">Time & Date</th>
                    </tr>
                </thead>
                <tbody>
                    {currentMoves.map((move, index) => (
                        <tr 
                            key={move.id} 
                            className={`border-b border-neutral-700 cursor-pointer ${
                                indexOfFirstMove + index === currentMoveIndex
                                    ? 'bg-neutral-700 hover:bg-neutral-900'
                                    : 'bg-neutral-800 hover:bg-neutral-700'
                            }`}
                            onClick={() => displayMoveOnBoard(indexOfFirstMove + index)}
                        >
                            <td className="px-6 py-4">{move.playerHandle}</td>
                            <td className="px-6 py-4">{move.move}</td>
                            <td className="px-6 py-4">{formatTimestamp(move.moveTimestamp)}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <Pagination 
                movesPerPage={movesPerPage} 
                totalMoves={moveHistory.length} 
                paginate={paginate}
                currentPage={currentPage}
            />
        </div>
    </div>
    );
}